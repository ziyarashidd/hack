import express from "express";
import mongoose from "mongoose";
import cors from "cors";
import multer from "multer";

const app = express();
const PORT = 5000;

// Middleware
app.use(cors());
app.use(express.json({ limit: "50mb" }));

// MongoDB connection
mongoose
  .connect("mongodb://127.0.0.1:27017/pdfUploads", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log("MongoDB connected"))
  .catch((err) => console.error(err));

// PDF Schema
const pdfSchema = new mongoose.Schema({
  name: String,
  email: String,
  phone: String,
  pdf: String, // Base64 string
  submittedAt: { type: Date, default: Date.now },
  rating: { type: Number, default: null }, // Admin fill karega
});

const Pdf = mongoose.model("Pdf", pdfSchema);

// Multer setup (store in memory)
const storage = multer.memoryStorage();
const upload = multer({ storage });

/* ------------------- Routes ------------------- */

// Upload PDF
app.post("/upload", upload.single("pdf"), async (req, res) => {
  try {
    const { name, email, phone } = req.body;
    const file = req.file;

    if (!file || file.mimetype !== "application/pdf") {
      return res.status(400).json({ error: "Please upload a valid PDF" });
    }

    const pdfData = file.buffer.toString("base64");

    const newPdf = new Pdf({ name, email, phone, pdf: pdfData });
    await newPdf.save();

    res.json({ message: "PDF uploaded successfully" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Server error" });
  }
});

// Get all submissions
app.get("/submissions", async (req, res) => {
  try {
    const submissions = await Pdf.find().sort({ submittedAt: -1 });
    res.json(submissions);
  } catch (err) {
    res.status(500).json({ error: "Server error" });
  }
});

// Get selected submissions (rating >= 6)
app.get("/submissions/selected", async (req, res) => {
  try {
    const selected = await Pdf.find({ rating: { $gte: 6 } }).sort({ submittedAt: -1 });
    res.json(selected);
  } catch (err) {
    res.status(500).json({ error: "Server error" });
  }
});

// Get pending submissions (rating null)
app.get("/submissions/pending", async (req, res) => {
  try {
    const pending = await Pdf.find({ rating: null }).sort({ submittedAt: -1 });
    res.json(pending);
  } catch (err) {
    res.status(500).json({ error: "Server error" });
  }
});

// Get not-selected submissions (rating < 6)
app.get("/submissions/not-selected", async (req, res) => {
  try {
    const notSelected = await Pdf.find({ rating: { $lt: 6, $ne: null } }).sort({ submittedAt: -1 });
    res.json(notSelected);
  } catch (err) {
    res.status(500).json({ error: "Server error" });
  }
});

// Update rating (admin)
app.put("/submissions/:id/rate", async (req, res) => {
  try {
    const { id } = req.params;
    const { rating } = req.body;

    if (rating < 0 || rating > 10) return res.status(400).json({ error: "Invalid rating" });

    const updated = await Pdf.findByIdAndUpdate(id, { rating }, { new: true });
    res.json(updated);
  } catch (err) {
    res.status(500).json({ error: "Server error" });
  }
});

// Delete a submission
app.delete("/submissions/:id", async (req, res) => {
  try {
    const { id } = req.params;
    await Pdf.findByIdAndDelete(id);
    res.json({ message: "Submission deleted successfully" });
  } catch (err) {
    res.status(500).json({ error: "Server error" });
  }
});

// Server start
app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));
