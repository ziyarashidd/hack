// src/App.jsx
import React, { useEffect, useState } from "react";
import {
  BrowserRouter as Router,
  Routes,
  Route,
  Navigate,
  useNavigate,
  Link,
} from "react-router-dom";

/* -------------------------
  STORAGE KEYS (localStorage)
----------------------------*/
const KEY_Q = "mcq_questions_v3";
const KEY_SCORE = "mcq_scorecards_v3";
const KEY_PERM = "mcq_permissions_v3"; // { email: remainingAttempts }
const KEY_ATTEMPTED = "mcq_attempted_v3"; // [email, ...]
const ADMIN_USER = "admin";
const ADMIN_PASS = "admin123";

/* -------------------------
  Helper utilities
----------------------------*/
const load = (k, fallback) => {
  try {
    const raw = localStorage.getItem(k);
    return raw ? JSON.parse(raw) : fallback;
  } catch {
    return fallback;
  }
};
const save = (k, v) => localStorage.setItem(k, JSON.stringify(v));

/* -------------------------
  Starter data (if none)
----------------------------*/
const starterQuestions = [
  {
    id: 1,
    q: "Which planet is known as the Red Planet?",
    options: ["Earth", "Mars", "Jupiter", "Saturn"],
    correct: 1,
  },
  {
    id: 2,
    q: "What does HTML stand for?",
    options: [
      "Hyperlinks and Text Markup Language",
      "Home Tool Markup Language",
      "HyperText Markup Language",
      "Hyper Tool Multi Language",
    ],
    correct: 2,
  },
  {
    id: 3,
    q: "Which language runs in a web browser?",
    options: ["Java", "C", "Python", "JavaScript"],
    correct: 3,
  },
];

/* =========================
   App (routes + auth state)
   ========================= */
export default function App() {
  const [isAdminAuth, setIsAdminAuth] = useState(() => false);

  return (
    <Router>
      <div className="min-h-screen bg-gradient-to-br from-slate-900 to-slate-800 text-slate-100">
        <header className="max-w-5xl mx-auto px-4 py-6 flex items-center justify-between">
          <Link to="/" className="text-2xl font-bold">
            MCQ Quiz
          </Link>
          <nav className="flex gap-3 items-center">
            <Link to="/" className="px-3 py-1 rounded hover:bg-slate-700">
              User
            </Link>
            <Link to="/admin" className="px-3 py-1 rounded bg-slate-700">
              Admin
            </Link>
          </nav>
        </header>

        <main className="max-w-5xl mx-auto px-4 pb-12">
          <Routes>
            <Route path="/" element={<UserPanel />} />
            <Route
              path="/admin"
              element={<AdminLogin setIsAdminAuth={setIsAdminAuth} />}
            />
            <Route
              path="/admin/panel"
              element={
                isAdminAuth ? (
                  <AdminPanel setIsAdminAuth={setIsAdminAuth} />
                ) : (
                  <Navigate to="/admin" />
                )
              }
            />
            <Route path="*" element={<Navigate to="/" />} />
          </Routes>
        </main>
      </div>
    </Router>
  );
}

/* =========================
   USER PANEL
   ========================= */
function UserPanel() {
  // load questions
  const [questions, setQuestions] = useState(() =>
    load(KEY_Q, starterQuestions)
  );
  useEffect(() => save(KEY_Q, questions), [questions]);

  // user form
  const [step, setStep] = useState("idle"); // idle -> form -> quiz -> finished
  const [userMeta, setUserMeta] = useState({ name: "", email: "", phone: "" });

  // quiz state
  const [index, setIndex] = useState(0);
  const [selected, setSelected] = useState(null);
  const [correctCount, setCorrectCount] = useState(0);
  const [answers, setAnswers] = useState([]);

  // persistence: scorecards, permissions, attempted
  const [scorecards, setScorecards] = useState(() => load(KEY_SCORE, []));
  useEffect(() => save(KEY_SCORE, scorecards), [scorecards]);

  const [permissions, setPermissions] = useState(() => load(KEY_PERM, {}));
  useEffect(() => save(KEY_PERM, permissions), [permissions]);

  const [attempted, setAttempted] = useState(() => load(KEY_ATTEMPTED, []));
  useEffect(() => save(KEY_ATTEMPTED, attempted), [attempted]);

  // validations
  const validEmail = (s) =>
    /^\S+@\S+\.\S+$/.test(s.trim());
  const validPhone = (s) =>
    /^\d{7,15}$/.test(s.trim()); // basic check

  // start flow: show form, then check if allowed
  function onStartClick() {
    setStep("form");
  }
  function handleFormSubmit(e) {
    e?.preventDefault?.();
    const { name, email, phone } = userMeta;
    if (!name.trim()) return alert("Please enter your name");
    if (!validEmail(email)) return alert("Enter a valid email");
    if (!validPhone(phone)) return alert("Enter a valid phone number (digits only)");

    // check attempted + permissions
    const emailLower = email.trim().toLowerCase();
    const hasAttempted = attempted.includes(emailLower);
    const remaining = permissions[emailLower] || 0;

    if (hasAttempted && remaining <= 0) {
      // blocked
      return alert(
        "You have already attempted this quiz. Contact admin for permission to retake."
      );
    }

    // allowed: if had permission >0, we will decrement it later after they finish
    startQuiz();
  }

  function startQuiz() {
    setIndex(0);
    setSelected(null);
    setCorrectCount(0);
    setAnswers([]);
    setStep("quiz");
  }

  function submitAnswer() {
    if (selected === null) {
      alert("Please select an option.");
      return;
    }
    const q = questions[index];
    const isCorrect = Number(selected) === Number(q.correct);
    if (isCorrect) setCorrectCount((c) => c + 1);
    setAnswers((a) => [
      ...a,
      {
        questionId: q.id,
        question: q.q,
        selected: Number(selected),
        selectedText: q.options[Number(selected)],
        correctIndex: q.correct,
        correctText: q.options[q.correct],
      },
    ]);
    setSelected(null);
    if (index + 1 < questions.length) {
      setIndex((i) => i + 1);
    } else {
      finishQuiz();
    }
  }

  function finishQuiz() {
    // Save scorecard (with meta)
    const emailLower = userMeta.email.trim().toLowerCase();

    // If user had a permission value >0, decrement it; else mark as attempted (if not already)
    const remaining = permissions[emailLower] || 0;
    let newPerm = { ...permissions };
    let newAttempted = [...attempted];

    if (remaining > 0) {
      newPerm[emailLower] = Math.max(0, remaining - 1);
    } else {
      if (!newAttempted.includes(emailLower)) newAttempted.push(emailLower);
    }

    setPermissions(newPerm);
    setAttempted(newAttempted);

    const card = {
      id: Date.now(),
      name: userMeta.name.trim(),
      email: emailLower,
      phone: userMeta.phone.trim(),
      score: correctCount,
      total: questions.length,
      date: new Date().toISOString(),
      answers,
    };
    const newCards = [card, ...scorecards];
    setScorecards(newCards);
    setStep("finished");
  }

  function resetForm() {
    setUserMeta({ name: "", email: "", phone: "" });
    setStep("idle");
    setIndex(0);
    setSelected(null);
    setCorrectCount(0);
    setAnswers([]);
  }

  return (
    <div className="bg-slate-900 rounded-xl p-6 shadow-lg">
      <h2 className="text-2xl font-bold mb-4">Take the Quiz</h2>

      {step === "idle" && (
        <div className="space-y-4">
          <p className="text-slate-300">
            Welcome! Click <strong>Start Quiz</strong>, fill your details and begin.
          </p>
          <div className="flex gap-3">
            <button
              onClick={onStartClick}
              className="px-4 py-2 bg-emerald-600 rounded hover:bg-emerald-500"
            >
              Start Quiz
            </button>
            <button
              onClick={() => {
                // quick info: whether current email (if any) attempted
                alert("One attempt per user. Contact admin for permission to retake.");
              }}
              className="px-4 py-2 bg-slate-700 rounded"
            >
              Info
            </button>
          </div>
          <div className="mt-4 text-sm text-slate-400">
            <strong>Note:</strong> Only Name, Email and Phone are collected. Admin can view full
            scorecards (with contact). Users only see Name & Score on their end.
          </div>
        </div>
      )}

      {step === "form" && (
        <form
          className="bg-slate-800 p-4 rounded-md space-y-3"
          onSubmit={handleFormSubmit}
        >
          <div>
            <label className="block text-sm text-slate-200">Name</label>
            <input
              className="w-full mt-1 p-2 rounded text-black"
              value={userMeta.name}
              onChange={(e) => setUserMeta({ ...userMeta, name: e.target.value })}
            />
          </div>
          <div>
            <label className="block text-sm text-slate-200">Email</label>
            <input
              className="w-full mt-1 p-2 rounded text-black"
              value={userMeta.email}
              onChange={(e) => setUserMeta({ ...userMeta, email: e.target.value })}
            />
          </div>
          <div>
            <label className="block text-sm text-slate-200">Phone</label>
            <input
              className="w-full mt-1 p-2 rounded text-black"
              value={userMeta.phone}
              onChange={(e) => setUserMeta({ ...userMeta, phone: e.target.value })}
            />
          </div>
          <div className="flex gap-3">
            <button
              type="submit"
              className="px-4 py-2 bg-blue-600 rounded hover:bg-blue-500"
            >
              Start
            </button>
            <button
              type="button"
              onClick={() => setStep("idle")}
              className="px-4 py-2 bg-slate-700 rounded"
            >
              Cancel
            </button>
          </div>
        </form>
      )}

      {step === "quiz" && questions.length > 0 && (
        <div className="mt-4">
          <div className="text-sm text-slate-400">Question {index + 1} / {questions.length}</div>
          <h3 className="text-lg font-semibold mt-2">{questions[index].q}</h3>
          <div className="mt-3 grid gap-2">
            {questions[index].options.map((op, i) => (
              <label
                key={i}
                className={`p-3 rounded border flex items-center gap-3 cursor-pointer ${
                  selected !== null && Number(selected) === i
                    ? "border-emerald-400 bg-emerald-950/20"
                    : "border-transparent hover:bg-slate-800"
                }`}
              >
                <input
                  type="radio"
                  name="opt"
                  value={i}
                  checked={selected !== null && Number(selected) === i}
                  onChange={(e) => setSelected(Number(e.target.value))}
                />
                <span>{op}</span>
              </label>
            ))}
          </div>

          <div className="mt-4 flex gap-3">
            <button
              onClick={submitAnswer}
              className="px-4 py-2 bg-emerald-600 rounded hover:bg-emerald-500"
            >
              Submit & Next
            </button>
            <button
              onClick={() => {
                if (window.confirm("Quit quiz? progress will be lost.")) resetForm();
              }}
              className="px-4 py-2 bg-slate-700 rounded"
            >
              Quit
            </button>
          </div>
        </div>
      )}

      {step === "finished" && (
        <div className="mt-4 bg-slate-800 p-4 rounded">
          <h3 className="text-xl font-bold">Scorecard</h3>
          <p className="mt-2 text-slate-200">
            <strong>{userMeta.name}</strong> — {correctCount} / {questions.length} correct
          </p>
          <div className="mt-3 flex gap-3">
            <button
              onClick={() => {
                // allow user to view only name+score of their latest attempt; keep them on finished
                alert("Your score has been saved. Admin can view full details.");
              }}
              className="px-3 py-1 bg-blue-600 rounded"
            >
              OK
            </button>
            <button
              onClick={() => {
                resetForm();
              }}
              className="px-3 py-1 bg-slate-700 rounded"
            >
              Back to Home
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

/* =========================
   ADMIN LOGIN
   ========================= */
function AdminLogin({ setIsAdminAuth }) {
  const [user, setUser] = useState("");
  const [pass, setPass] = useState("");
  const navigate = useNavigate();

  function doLogin(e) {
    e?.preventDefault?.();
    if (user === ADMIN_USER && pass === ADMIN_PASS) {
      setIsAdminAuth(true);
      navigate("/admin/panel");
    } else {
      alert("Invalid credentials");
    }
  }

  return (
    <div className="min-h-[60vh] flex items-center justify-center">
      <form
        onSubmit={doLogin}
        className="bg-slate-800 p-6 rounded-lg w-full max-w-md shadow"
      >
        <h3 className="text-xl font-bold mb-3">Admin Login</h3>
        <input
          placeholder="Username"
          className="w-full p-2 rounded mb-2 text-black"
          value={user}
          onChange={(e) => setUser(e.target.value)}
        />
        <input
          placeholder="Password"
          type="password"
          className="w-full p-2 rounded mb-4 text-black"
          value={pass}
          onChange={(e) => setPass(e.target.value)}
        />
        <div className="flex gap-3">
          <button className="px-4 py-2 bg-emerald-600 rounded">Login</button>
          <Link to="/" className="px-4 py-2 bg-slate-700 rounded">Back</Link>
        </div>
        <p className="text-sm text-slate-400 mt-3">Demo creds: admin / admin123</p>
      </form>
    </div>
  );
}

/* =========================
   ADMIN PANEL
   ========================= */
function AdminPanel({ setIsAdminAuth }) {
  const [questions, setQuestions] = useState(() => load(KEY_Q, starterQuestions));
  useEffect(() => save(KEY_Q, questions), [questions]);

  const [scorecards, setScorecards] = useState(() => load(KEY_SCORE, []));
  useEffect(() => save(KEY_SCORE, scorecards), [scorecards]);

  const [permissions, setPermissions] = useState(() => load(KEY_PERM, {}));
  useEffect(() => save(KEY_PERM, permissions), [permissions]);

  const [attempted, setAttempted] = useState(() => load(KEY_ATTEMPTED, []));
  useEffect(() => save(KEY_ATTEMPTED, attempted), [attempted]);

  // Manage question add/edit form
  const emptyNew = { id: null, q: "", options: ["", "", "", ""], correct: 0 };
  const [editing, setEditing] = useState(null); // null or question object
  const [form, setForm] = useState(emptyNew);

  // tab control
  const [tab, setTab] = useState("questions"); // questions | scorecards | permissions

  // question actions
  function startAdd() {
    setEditing(null);
    setForm(emptyNew);
  }
  function startEdit(q) {
    setEditing(q.id);
    setForm({ ...q, options: [...q.options] });
  }
  function saveQuestion(e) {
    e?.preventDefault?.();
    if (!form.q.trim()) return alert("Question text required");
    if (form.options.some((o) => !o.trim())) return alert("All options required");
    if (form.correct < 0 || form.correct > form.options.length - 1)
      return alert("Correct option index invalid");

    if (editing) {
      setQuestions((prev) =>
        prev.map((x) => (x.id === editing ? { ...form, correct: Number(form.correct) } : x))
      );
      alert("Question updated");
    } else {
      const newQ = { ...form, id: Date.now(), correct: Number(form.correct) };
      setQuestions((prev) => [newQ, ...prev]);
      alert("Question added");
    }
    setEditing(null);
    setForm(emptyNew);
  }
  function deleteQuestion(id) {
    if (!confirm("Delete this question?")) return;
    setQuestions((prev) => prev.filter((x) => x.id !== id));
  }

  // scorecard actions
  function deleteScorecard(id) {
    if (!confirm("Delete this scorecard?")) return;
    setScorecards((prev) => prev.filter((s) => s.id !== id));
  }

  // permissions management
  function grantPermission(email, attempts = 1) {
    const e = email.trim().toLowerCase();
    if (!e) return;
    setPermissions((prev) => {
      const next = { ...prev };
      next[e] = (next[e] || 0) + attempts;
      return next;
    });
    alert(`Granted ${attempts} attempt(s) to ${e}`);
  }
  function revokePermissions(email) {
    const e = email.trim().toLowerCase();
    const next = { ...permissions };
    delete next[e];
    setPermissions(next);
    alert(`Permissions removed for ${e}`);
  }
  function resetAttempt(email) {
    // remove from attempted list so they can attempt without admin granting (admin choice)
    const e = email.trim().toLowerCase();
    setAttempted((prev) => prev.filter((x) => x !== e));
    alert(`${e} removed from attempted list`);
  }

  // logout
  const navigate = useNavigate();
  function logout() {
    setIsAdminAuth(false);
    navigate("/");
  }

  return (
    <div className="bg-slate-900 p-6 rounded-xl shadow">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-bold">Admin Panel</h2>
        <div className="flex gap-2 items-center">
          <button onClick={logout} className="px-3 py-1 bg-red-600 rounded">Logout</button>
        </div>
      </div>

      <div className="flex gap-3 mb-4">
        <button
          className={`px-3 py-1 rounded ${tab === "questions" ? "bg-emerald-600" : "bg-slate-800"}`}
          onClick={() => setTab("questions")}
        >
          Manage Questions
        </button>
        <button
          className={`px-3 py-1 rounded ${tab === "scorecards" ? "bg-emerald-600" : "bg-slate-800"}`}
          onClick={() => setTab("scorecards")}
        >
          Scorecards
        </button>
        <button
          className={`px-3 py-1 rounded ${tab === "permissions" ? "bg-emerald-600" : "bg-slate-800"}`}
          onClick={() => setTab("permissions")}
        >
          Permissions
        </button>
      </div>

      {tab === "questions" && (
        <div>
          <div className="mb-3 flex justify-between items-center">
            <h3 className="text-xl font-semibold">Questions</h3>
            <div>
              <button onClick={startAdd} className="px-3 py-1 bg-blue-600 rounded">Add New</button>
            </div>
          </div>

          <form onSubmit={saveQuestion} className="bg-slate-800 p-4 rounded mb-4 space-y-2">
            <label className="text-sm">Question</label>
            <input
              className="w-full p-2 rounded text-black"
              value={form.q}
              onChange={(e) => setForm({ ...form, q: e.target.value })}
            />
            <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
              {form.options.map((opt, i) => (
                <input
                  key={i}
                  className="p-2 rounded text-black"
                  value={opt}
                  placeholder={`Option ${i + 1}`}
                  onChange={(e) => {
                    const ops = [...form.options];
                    ops[i] = e.target.value;
                    setForm({ ...form, options: ops });
                  }}
                />
              ))}
            </div>
            <div className="flex items-center gap-3">
              <label className="text-sm">Correct index (0-based)</label>
              <input
                type="number"
                min={0}
                max={form.options.length - 1}
                className="w-24 p-2 rounded text-black"
                value={form.correct}
                onChange={(e) => setForm({ ...form, correct: Number(e.target.value) })}
              />
              <button className="px-3 py-1 bg-emerald-600 rounded">Save Question</button>
              {editing && (
                <button
                  type="button"
                  className="px-3 py-1 bg-slate-700 rounded"
                  onClick={() => {
                    setEditing(null);
                    setForm(emptyNew);
                  }}
                >
                  Cancel Edit
                </button>
              )}
            </div>
          </form>

          <div className="space-y-3">
            {questions.length === 0 && <p className="text-slate-400">No questions yet.</p>}
            {questions.map((q, idx) => (
              <div key={q.id} className="bg-slate-800 p-3 rounded flex justify-between items-start gap-4">
                <div className="flex-1">
                  <div className="font-semibold">{idx + 1}. {q.q}</div>
                  <div className="text-sm text-slate-400 mt-1">
                    Options: {q.options.join(" | ")} • Correct: Option {q.correct + 1}
                  </div>
                </div>
                <div className="flex flex-col gap-2">
                  <button onClick={() => startEdit(q)} className="px-3 py-1 bg-yellow-500 rounded">Edit</button>
                  <button onClick={() => deleteQuestion(q.id)} className="px-3 py-1 bg-red-600 rounded">Delete</button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {tab === "scorecards" && (
        <div>
          <h3 className="text-xl font-semibold mb-3">Saved Scorecards (Detailed)</h3>
          {scorecards.length === 0 && <p className="text-slate-400">No scorecards yet.</p>}
          <div className="space-y-3">
            {scorecards.map((sc) => (
              <div key={sc.id} className="bg-slate-800 p-3 rounded">
                <div className="flex justify-between items-start gap-4">
                  <div>
                    <div className="font-bold">{sc.name} — {sc.score}/{sc.total}</div>
                    <div className="text-sm text-slate-400">{sc.email} • {sc.phone}</div>
                    <div className="text-xs text-slate-400 mt-1">{new Date(sc.date).toLocaleString()}</div>
                    <details className="mt-2 text-sm">
                      <summary className="cursor-pointer">View answers</summary>
                      <div className="mt-2 space-y-2">
                        {sc.answers.map((a, i) => (
                          <div key={i} className="bg-slate-900 p-2 rounded">
                            <div className="font-medium">{i+1}. {a.question}</div>
                            <div className="text-xs text-slate-400">Your: {a.selectedText} • Correct: {a.correctText}</div>
                          </div>
                        ))}
                      </div>
                    </details>
                  </div>
                  <div className="flex flex-col gap-2">
                    <button onClick={() => navigator.clipboard.writeText(JSON.stringify(sc)).then(()=>alert('Copied'))} className="px-3 py-1 bg-slate-700 rounded">Copy</button>
                    <button onClick={() => deleteScorecard(sc.id)} className="px-3 py-1 bg-red-600 rounded">Delete</button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {tab === "permissions" && (
        <div>
          <h3 className="text-xl font-semibold mb-3">Permissions & Attempts</h3>

          <div className="grid md:grid-cols-2 gap-4">
            {/* Grant area */}
            <div className="bg-slate-800 p-3 rounded">
              <GrantPermForm onGrant={(email, attempts) => grantPermission(email, attempts, permissions, setPermissions)} />
              <div className="mt-3 text-sm text-slate-400">
                Grant a user extra attempt(s) so they can retake the quiz.
              </div>
            </div>

            {/* Current permissions list */}
            <div className="bg-slate-800 p-3 rounded">
              <div className="font-semibold mb-2">Active Permissions</div>
              {Object.keys(permissions).length === 0 && <div className="text-slate-400">No active permissions.</div>}
              <div className="space-y-2">
                {Object.entries(permissions).map(([email, rem]) => (
                  <div key={email} className="flex justify-between items-center bg-slate-900 p-2 rounded">
                    <div>
                      <div className="font-medium">{email}</div>
                      <div className="text-xs text-slate-400">Remaining attempts: {rem}</div>
                    </div>
                    <div className="flex gap-2">
                      <button onClick={() => { grantPermission(email, 1); }} className="px-2 py-1 bg-emerald-600 rounded">+1</button>
                      <button onClick={() => revokePermissions(email)} className="px-2 py-1 bg-red-600 rounded">Revoke</button>
                    </div>
                  </div>
                ))}
              </div>

              <div className="mt-4">
                <div className="font-semibold mb-2">Attempted Users</div>
                {attempted.length === 0 && <div className="text-slate-400">No attempts recorded yet.</div>}
                <div className="space-y-2">
                  {attempted.map((e) => (
                    <div key={e} className="flex justify-between items-center bg-slate-900 p-2 rounded">
                      <div>{e}</div>
                      <div className="flex gap-2">
                        <button onClick={() => resetAttempt(e)} className="px-2 py-1 bg-blue-600 rounded">Reset</button>
                      </div>
                    </div>
                  ))}
                </div>
                <div className="text-xs text-slate-400 mt-2">Reset removes them from attempted list; they can then attempt once unless admin grants further permission.</div>
              </div>
            </div>
          </div>
        </div>
      )}

    </div>
  );

  // helper scoped functions for admin actions to access closure state
  function grantPermission(email, attempts=1) {
    const e = email.trim().toLowerCase();
    if (!e) return;
    setPermissions((prev) => {
      const next = { ...prev };
      next[e] = (next[e] || 0) + attempts;
      return next;
    });
    alert(`Granted ${attempts} attempt(s) to ${e}`);
  }
  function revokePermissions(email) {
    const e = email.trim().toLowerCase();
    const next = { ...permissions };
    delete next[e];
    setPermissions(next);
    alert(`Permissions removed for ${e}`);
  }
  function resetAttempt(email) {
    const e = email.trim().toLowerCase();
    setAttempted((prev) => prev.filter((x) => x !== e));
    alert(`${e} removed from attempted list`);
  }
}

/* -------------------------
  Grant permission small form
----------------------------*/
function GrantPermForm({ onGrant }) {
  const [email, setEmail] = useState("");
  const [n, setN] = useState(1);
  return (
    <form
      onSubmit={(e) => {
        e.preventDefault();
        if (!email.trim()) return alert("Enter email");
        onGrant(email.trim().toLowerCase(), Number(n));
        setEmail("");
        setN(1);
      }}
      className="space-y-2"
    >
      <label className="text-sm">Email to grant permission</label>
      <input className="w-full p-2 rounded text-black" value={email} onChange={e=>setEmail(e.target.value)} />
      <div className="flex gap-2 items-center">
        <input type="number" min={1} max={10} className="w-20 p-2 rounded text-black" value={n} onChange={e=>setN(e.target.value)} />
        <button className="px-3 py-1 bg-emerald-600 rounded">Grant</button>
      </div>
    </form>
  );
}
